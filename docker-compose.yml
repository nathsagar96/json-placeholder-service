services:
  loki:
    image: grafana/loki:main
    container_name: loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    networks:
      - json-placeholder-service-network
    volumes:
      - loki-data:/data

  prometheus:
    image: prom/prometheus:v2.46.0
    container_name: prometheus
    command: --enable-feature=exemplar-storage --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - json-placeholder-service-network
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro

  tempo:
    image: grafana/tempo:2.2.2
    container_name: tempo
    command: -config.file=/etc/tempo.yaml
    ports:
      - "3110:3100" # Tempo
      - "9411:9411" # zipkin
    networks:
      - json-placeholder-service-network
    volumes:
      - ./docker/tempo/tempo.yml:/etc/tempo.yaml:ro
      - tempo-data:/tmp/tempo

  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    ports:
      - "3000:3000"
    networks:
      - json-placeholder-service-network
    volumes:
      - ./docker/grafana:/etc/grafana/provisioning/datasources:ro

  config-service:
    container_name: config-service
    build:
      context: ./config-service/
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    networks:
      - json-placeholder-service-network
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8888/post-service/default" ]
      interval: 30s
      timeout: 5s
      retries: 5

  discovery-service:
    container_name: discovery-service
    build:
      context: ./discovery-service/
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - json-placeholder-service-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:8761/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  gateway-service:
    container_name: gateway-service
    build:
      context: ./gateway-service/
      dockerfile: Dockerfile
    ports:
      - "8090:8090"
    networks:
      - json-placeholder-service-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      discovery-service:
        condition: service_healthy
      loki:
        condition: service_started
      prometheus:
        condition: service_started
      tempo:
        condition: service_started
      grafana:
        condition: service_started

  post-service:
    container_name: post-service
    build:
      context: ./post-service
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    networks:
      - json-placeholder-service-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      loki:
        condition: service_started
      prometheus:
        condition: service_started
      tempo:
        condition: service_started
      grafana:
        condition: service_started

  comment-service:
    container_name: comment-service
    build:
      context: ./comment-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    networks:
      - json-placeholder-service-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      loki:
        condition: service_started
      prometheus:
        condition: service_started
      tempo:
        condition: service_started
      grafana:
        condition: service_started

  album-service:
    container_name: album-service
    build:
      context: ./album-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    networks:
      - json-placeholder-service-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      loki:
        condition: service_started
      prometheus:
        condition: service_started
      tempo:
        condition: service_started
      grafana:
        condition: service_started

  photo-service:
    container_name: photo-service
    build:
      context: ./photo-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    networks:
      - json-placeholder-service-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      loki:
        condition: service_started
      prometheus:
        condition: service_started
      tempo:
        condition: service_started
      grafana:
        condition: service_started

  todo-service:
    container_name: todo-service
    build:
      context: ./todo-service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    networks:
      - json-placeholder-service-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      loki:
        condition: service_started
      prometheus:
        condition: service_started
      tempo:
        condition: service_started
      grafana:
        condition: service_started

  user-service:
    container_name: user-service
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    networks:
      - json-placeholder-service-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      config-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
      loki:
        condition: service_started
      prometheus:
        condition: service_started
      tempo:
        condition: service_started
      grafana:
        condition: service_started

networks:
  json-placeholder-service-network:
    driver: bridge

volumes:
  loki-data:
  tempo-data:
